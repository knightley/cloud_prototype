language: c

before_script:
  #TODO 1: 下载agent安装包，agent安装包放在哪里？理想：wget/curl下载安装
  - ls
  - pwd
  - echo $HOME
  - echo $PATH
  - export PATH=$PATH:$HOME/build/knightley/public_demo_benchmark/bin
  - echo $PATH
  - wget -q https://ci-integration.oss-cn-shanghai.aliyuncs.com/xcal-agent.tgz && tar -xf xcal-agent.tgz -C $HOME/build
  - export PYTHONPATH=$HOME/build/xcal-agent/agent:$HOME/build/xcal-agent/agent/commondef/src
  - echo $PYTHONPATH
  - ls
  - pwd
  - cd c_testcase/basic

env:
  - ENV_VAR=''
  
stage: compile
script:
  - make
  - xcalagent.sh
  - submit_task.sh
  - $HOME/build/xcal-agent/tools/xcal-agent.py -a -d
  - cat /home/travis/build/knightley/public_demo_benchmark/c_testcase/basic/.xcalagent/2da0a2f8-5bd3-4051-9316-bad4b398da23/xcalagent.log
  - cat /home/travis/build/knightley/public_demo_benchmark/c_testcase/basic/.xcalagent/2da0a2f8-5bd3-4051-9316-bad4b398da23/xcalbuild.log
  #TODO 2: - ./xcal-agent.py -ac ../workdir/run.conf -pc xxx/xxx/xcal-preprocess.conf -a (artifact put in one place)
  #TODO 3: - 一个完整的preprocess conf，所有扫描依赖的信息都放到preprocess conf中，保证demo benchmark能够跑通
  #TODO 4: - 重新审视task context，保证demo benchmark能够使用xvsa跑起来。xvsa的输出位置。
  #TODO 5: - submit_task.sh (call submit_task.py with aws credentail and agent artifact)
  

#order:
#TODO 3: - 一个完整的preprocess conf，所有扫描依赖的信息都放到preprocess conf中，保证demo benchmark能够跑通
#TODO 4: - 重新审视task context，保证demo benchmark能够使用xvsa跑起来。xvsa的输出位置。

#TODO 2: - ./xcal-agent.py -ac ../workdir/run.conf -pc xxx/xxx/xcal-preprocess.conf -a (artifact put in one place)
#TODO 5: - submit_task.sh (call submit_task.py with aws credentail and agent artifact)

#TODO 1: 下载agent安装包，agent安装包放在哪里？理想：wget/curl下载安装
